/*
   Copyright 2009 Attila Szegedi

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package org.dynalang.dynalink;

/**
 * The interface for invokedynamic linker. Users of invokedynamic will 
 * normally obtain one through a {@link DynamicLinkerFactory} and invoke its 
 * method from their invokedynamic bootstrap method to set the target of all 
 * its call sites. Usual usage would be to create one class per language 
 * runtime to contain one linker instance as:
 * <pre>
 * class MyLanguageRuntime {
 *     private static final DynamicLinker dynamicLinker = createDynamicLinker();
 *     private static final GuardingDynamicLinker myLanguageLinker = new MyLanguageLinker();
 *     
 *     private static DynamicLinker createDynamicLinker() {
 *         final DynamicLinkerFactory factory = new DynamicLinkerFactory();
 *         factory.setPrioritizedLinker(myLanguageLinker);
 *         return factory.createLinker(); 
 *     }
 *     
 *     public static CallSite bootstrap(Object caller, String name, MethodType type) {
 *         final RelinkableCallSite callSite = new MonomorphicCallSite(caller, name, type);
 *         dynamicLinker.link(callSite);
 *         return callSite;
 *     }
 * }
 * </pre>
 * Then every class belonging to or generated by your language runtime that
 * uses invokedynamic would register the bootstrap method:
 * <pre>
 * public class MyClass {
 *     static {
 *         Linkage.registerBootstrapMethod(MyLanguageRuntime.class, "bootstrap");
 *     }
 *     ...
 * }
 * </pre>
 * Note how you're expected to implement a {@link GuardingDynamicLinker} for your own 
 * language. If your runtime doesn't have its own language and/or object model
 * (i.e. it's a generic scripting shell), you don't need to implement a dynamic
 * invoker; you would simply not invoke the <tt>setPrioritizedLinker</tt> on
 * the factory.
 * @author Attila Szegedi
 * @version $Id: $
 */
public interface DynamicLinker {
    /**
     * Links an invokedynamic call site. It will install a relink method handle
     * into the call site that hooks into the multi-language dispatch and 
     * relinking mechanisms.  
     * @param callSite the call site to link.
     */
    public void link(RelinkableCallSite callSite);
}
