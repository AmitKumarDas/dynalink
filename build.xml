<project xmlns:ivy="antlib:org.apache.ivy.ant" name="org.dynalang.mop" basedir=".">
<!--
   Copyright 2009-2011 Attila Szegedi

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<!-- $Id: build.xml 74 2007-04-02 09:34:33Z szegedia $ -->

	<property name="project.name" value="Dynamic Linker Framework for Languages on the JVM"/>
	<property name="artifact.name" value="dynalink"/>
	<property name="revision" value="0.2"/>
	<property name="build.dir" location="build"/>

	<property file="build.properties" />
	<property name="openjdk.base.dir" location="build/openjdk"/>
	<property name="openjdk.dir" location="${openjdk.base.dir}/jdk1.7.0"/>
	<property name="backport.dir" location="build/jsr292-backport"/>
	<property file="build.properties" />
	<property name="openjdk.rt.jar" location="${openjdk.dir}/jre/lib/rt.jar"/>
	<property name="backport.agent.jar" location="${backport.dir}/lib/jsr292-backport.jar"/>
	<property name="source.main.java" location="src/main/java"/>
	<property name="source.test.java" location="src/test/java"/>
	<condition property="isMac"><equals arg1="${os.name}" arg2="Mac OS X"/></condition>
	<condition property="isLinux"><equals arg1="${os.name}" arg2="Linux"/></condition>

	<target name="clean-all" description="Cleans everything, including downloaded 3rd party software.">
		<delete dir="${build.dir}" quiet="true"/>
	</target>

	<target name="clean" description="Cleans all artifacts built by the project; doesn't clean downloaded 3rd party software.">
		<delete includeemptydirs="true">
			<fileset dir="build" excludes="openjdk/**,jsr292-backport/**,test/lib/**"/>
		</delete>
	</target>

	<target name="checkOpenJdkAvailable">
		<condition property="openjdk.available">
			<available file="${openjdk.dir}/jre/bin/java"/>
		</condition>
	</target>

	<target name="downloadMacOpenJdk" if="isMac" unless="openjdk.available">
		<property name="openjdk.mac.version" value="java-1.7.0-internal-mlvm-2011_06_09"/>
		<mkdir dir="${openjdk.base.dir}"/>
		<get src="http://www.concord.org/~sbannasch/mlvm/${openjdk.mac.version}.tar.gz" dest="${openjdk.base.dir}/openjdk.tgz" usetimestamp="true"/>
		<!-- Not using <untar> task as it doesn't preserve UNIX permissions -->
		<exec executable="tar" dir="${openjdk.base.dir}">
			<arg value="xzf"/>
			<arg value="${openjdk.base.dir}/openjdk.tgz"/>
		</exec>
		<rename dest="${openjdk.dir}" src="${openjdk.base.dir}/${openjdk.mac.version}"/>
	</target>

	<target name="downloadLinuxOpenJdk" if="isLinux" unless="openjdk.available">
		<mkdir dir="${openjdk.base.dir}"/>
		<get src="http://www.java.net/download/jdk7/archive/b139/binaries/jdk-7-ea-bin-b139-linux-i586-21_apr_2011.tar.gz" dest="${openjdk.base.dir}/openjdk.tgz" usetimestamp="true"/>
		<!-- Not using <untar> task as it doesn't preserve UNIX permissions -->
		<exec executable="tar" dir="${openjdk.base.dir}">
			<arg value="xzf"/>
			<arg value="${openjdk.base.dir}/openjdk.tgz"/>
		</exec>
	</target>

	<target name="downloadOpenJdk" depends="checkOpenJdkAvailable,downloadMacOpenJdk,downloadLinuxOpenJdk"/>

	<target name="compile" depends="downloadOpenJdk">
		<property name="classes.dir" location="${build.dir}/classes"/>
		<mkdir dir="${classes.dir}"/>
		<javac compiler="extJavac" executable="${openjdk.dir}/bin/javac" srcdir="${source.main.java}" destdir="${classes.dir}" deprecation="off" 
			debug="on" optimize="off" target="1.7" source="1.7"
			bootclasspath="${openjdk.rt.jar}"/>
		<copy toDir="${classes.dir}">
			<fileset dir="${source.main.java}"
			excludes="**/CVS/**,**/*.bak,**/*.java,**/*.jj,**/package.html,overview.html"/>
		</copy>
	</target>

	<target name="jar" depends="compile">
		<property name="jarfile" location="build/${artifact.name}-${revision}.jar"/>
		<jar destfile="${jarfile}" basedir="${classes.dir}">
			<manifest>
				<attribute name="Implementation-Vendor" value="Attila Szegedi"/>
				<attribute name="Implementation-Version" value="${revision}"/>
				<attribute name="Implementation-Title" value="${project.name}"/>
				<attribute name="Implementation-URL" value="http://github.com/szegedi/dynalink"/>
			</manifest>
		</jar>
	</target>

	<target name="doc">
		<mkdir dir="${build.dir}/doc/javadoc"/>
		<delete includeEmptyDirs="yes">
			<fileset dir="${build.dir}/doc/javadoc" includes="**/*" />
		</delete>
		<javadoc author="true"
			executable="${openjdk.dir}/bin/javadoc"
			destdir="${build.dir}/doc/javadoc"
			doctitle="${project.name} ${revision}"
			packagenames="org.dynalang.*"
			sourcepath="${source.main.java}"
			version="true"
			windowtitle="${project.name} ${revision} API"
			overview="src/overview.html"
			use="true">
		</javadoc>
	</target>

	<property name="test.lib.dir" location="${build.dir}/test/lib"/>

	<target name="checkTestLibsAvailable">
		<condition property="testlibs.available">
			<and>
				<available file="${test.lib.dir}/emma.jar"/>
				<available file="${test.lib.dir}/emma_ant.jar"/>
				<available file="${test.lib.dir}/junit.jar"/>
				<available file="${test.lib.dir}/asm.jar"/>
			</and>
		</condition>
	</target>
	
	<target name="downloadTestLibs" unless="testlibs.available" depends="checkTestLibsAvailable">
		<mkdir dir="${test.lib.dir}"/>
		<get src="http://repo1.maven.org/maven2/emma/emma/2.1.5320/emma-2.1.5320.jar" dest="${test.lib.dir}/emma.jar" usetimestamp="true"/>
		<get src="http://repo1.maven.org/maven2/emma/emma_ant/2.1.5320/emma_ant-2.1.5320.jar" dest="${test.lib.dir}/emma_ant.jar" usetimestamp="true"/>
		<get src="http://repo1.maven.org/maven2/junit/junit/3.8.2/junit-3.8.2.jar" dest="${test.lib.dir}/junit.jar" usetimestamp="true"/>
		<get src="http://download.forge.objectweb.org/asm/asm-4.0_RC1.jar" dest="${test.lib.dir}/asm.jar" usetimestamp="true"/>
	</target>

	<target name="coverage-instrument" depends="compile, downloadTestLibs">
		<property name="coverage.dir" location="${build.dir}/coverage"/>
		<property name="coverage.classes.dir" location="${build.dir}/coverage/classes"/>
		<mkdir dir="${coverage.classes.dir}"/>
		<path id="emma.lib">
			<pathelement location="${test.lib.dir}/emma.jar" />
			<pathelement location="${test.lib.dir}/emma_ant.jar" />
		</path>
		<taskdef resource="emma_ant.properties" classpathref="emma.lib"/>
		<property name="coverage.instrumentationfile" location="${coverage.dir}/instrumentation"/>
		<emma enabled="true">
			<instr 
		instrpath="${classes.dir}" outdir="${coverage.classes.dir}" 
		outfile="${coverage.instrumentationfile}" mode="copy"/>
		</emma>
		<copy todir="${coverage.classes.dir}">
			<fileset dir="${source.main.java}" excludes="**/*.java"/>
		</copy>
		<copy todir="${coverage.classes.dir}">
			<fileset dir="${classes.dir}"/>
		</copy>
		<property name="coverage.outfile" location="${coverage.dir}/coverage"/>
	</target>

	<target name="test-compile" depends="compile, downloadTestLibs">
		<property name="test.classes.dir" location="${build.dir}/test/classes"/>
		<mkdir dir="${test.classes.dir}"/>
		<mkdir dir="${test.lib.dir}"/>
		<javac compiler="extJavac" executable="${openjdk.dir}/bin/javac" srcdir="${source.test.java}" destdir="${test.classes.dir}" deprecation="off" 
			debug="on" optimize="off" target="1.7" source="1.7" bootclasspath="${openjdk.rt.jar}">
			<classpath>
				<pathelement path="${classes.dir}"/>
				<pathelement path="${test.lib.dir}/junit.jar" />
				<pathelement path="${test.lib.dir}/asm.jar" />
			</classpath>
		</javac>
		<copy toDir="${test.classes.dir}">
			<fileset dir="${source.test.java}"
				excludes="**/CVS/**,**/*.bak,**/*.java,**/*.jj,**/package.html"/>
		</copy>
	</target>

	<target name="test-run-openjdk" depends="test-compile, coverage-instrument">
		<junit printsummary="on" fork="true" forkmode="once" 
			showoutput="true" haltonerror="false" haltonfailure="false"
			jvm="${openjdk.dir}/jre/bin/java">
			<bootclasspath>
				<pathelement path="openjdk.rt.jar"/>
			</bootclasspath>
			<jvmarg value="-XX:+UnlockDiagnosticVMOptions"/>
			<jvmarg value="-XX:+UnlockExperimentalVMOptions"/>
			<jvmarg value="-XX:+EnableInvokeDynamic"/>
			<sysproperty key="emma.coverage.out.file" value="${coverage.outfile}"/>
			<classpath>
				<pathelement path="${classes.dir}" />
				<pathelement path="${test.classes.dir}" />
				<pathelement path="${test.lib.dir}/emma.jar"/>
				<pathelement path="${test.lib.dir}/junit.jar"/>
				<pathelement path="${test.lib.dir}/asm.jar" />
			</classpath>
			<batchtest todir="build/test">
				<fileset dir="${test.classes.dir}" includes="**/Test*.class" excludes="**/*$*.class, Test*.class"/>
			</batchtest>
			<formatter type="plain" usefile="false" />
			<formatter type="xml" extension=".openjdk.xml"/>
		</junit>
	</target>

	<target name="checkBackportAvailable">
		<condition property="backport.available">
			<available file="${backport.dir}/lib/jsr292-backport.jar"/>
		</condition>
	</target>

	<target name="downloadBackport" unless="backport.available" depends="checkBackportAvailable">
		<get src="http://jvm-language-runtime.googlecode.com/files/jsr292-backport-1.6.zip" dest="build/jsr292-backport.zip"/>
		<mkdir dir="${backport.dir}"/>
		<unzip src= "build/jsr292-backport.zip" dest="${backport.dir}"/>
		<delete file="build/jsr292-backport.zip"/>
		<ant dir="${backport.dir}"/>
	</target>

	<target name="test-run-backport" depends="test-compile, coverage-instrument, downloadBackport">
		<junit printsummary="on" fork="true" forkmode="once" 
			showoutput="true" haltonerror="false" haltonfailure="false">
			<jvmarg value="-javaagent:${backport.agent.jar}"/>
			<sysproperty key="emma.coverage.out.file" value="${coverage.outfile}"/>
			<classpath>
				<pathelement path="${classes.dir}" />
				<pathelement path="${test.classes.dir}" />
				<pathelement path="${test.lib.dir}/emma.jar"/>
				<pathelement path="${test.lib.dir}/junit.jar"/>
			</classpath>
			<batchtest todir="build/test">
				<fileset dir="${test.classes.dir}" includes="**/Test*.class" excludes="**/*$*.class, Test*.class"/>
			</batchtest>
			<formatter type="plain" usefile="false" />
			<formatter type="xml" extension=".backport.xml"/>
		</junit>
	</target>

	<target name="test-run" depends="test-run-openjdk"/>

	<target name="test" depends="test-run">
		<mkdir dir="build/test/report"/>
		<junitreport todir="build/test">
			<fileset dir="build/test" includes="TEST-*.xml"/>
			<report todir="build/test/report"/>
		</junitreport>
		<property name="coverage.report.dir" location="${build.dir}/coverage/report"/>
		<mkdir dir="${coverage.report.dir}"/>
		<delete dir="${coverage.report.dir}"/>
		<mkdir dir="${coverage.report.dir}"/>
		<emma enabled="true">
			<report>
				<fileset dir="${basedir}">
					<include name="build/coverage/instrumentation"/>
					<include name="build/coverage/coverage"/>
				</fileset>
				<sourcepath>
					<dirset dir="${basedir}">
						<include name="${source.main.java}"/>
					</dirset>
				</sourcepath>
				<html outfile="${coverage.report.dir}/index.html"/>
			</report>
		</emma>
	</target>
	
	<target name="dist" depends="clean,test-run,jar,doc">
		<mkdir dir="build/${artifact.name}-${revision}"/>
		<copy todir="build/${artifact.name}-${revision}">
			<fileset dir="." excludes="build/**/*"/>
		</copy>
		<copy todir="build/${artifact.name}-${revision}">
			<fileset dir="." 
				includes="
					build/doc/**/* 
					build/${artifact.name}-${revision}.jar"
			/>
		</copy>
		<tar destfile="build/${artifact.name}-${revision}.tgz" 
			compression="gzip" basedir="build" 
			includes="${artifact.name}-${revision}/**/*"/>
	</target>
</project>